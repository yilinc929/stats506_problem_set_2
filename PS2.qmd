---
title: "Problem Set 2"
author: "Yilin Chen 30221403"
format: html
editor: visual
---

### Link to my GitHub repository: 

## Problem 1

### a)

-   Version 1: Implement this game using a loop over the die rolls.

    ```{r}
    cost_per_roll<-2
    play_dice_1<-function(num_rolls) {
      win<-0
      for (i in 1:num_rolls) {
        roll<-sample(1:6,1,replace=TRUE)
        if (roll %in% c(2,4,6)) {
          win<-win+roll
        } else {
          win<-win-cost_per_roll
        }
      }
      return(win)
    }
    ```

-   Version 2: Implement this game using built-in R vectorized functions.

    ```{r}
    play_dice_2<-function(num_rolls) {
      roll<-sample(1:6, num_rolls,replace=TRUE)
      win<-sum(ifelse(roll %in% c(2,4,6),roll,-cost_per_roll))
      return(win)
    }
    ```

-   Version 3: Implement this by collapsing the die rolls into a single `table()`.

    ```{r}
    play_dice_3<-function(num_rolls) {
      rolls<-sample(1:6,num_rolls,replace=TRUE)
      roll_table<-table(rolls)
      cols<-as.integer(names(roll_table))
      cols<-cols[cols %in% c(2,4,6)]
      
      win<-sum(cols*roll_table[as.character(cols)])
      total_cost<-cost_per_roll*num_rolls
      total_win<-win-total_cost
      return(total_win)
    }
    ```

-   Version 4: Implement this game by using one of the \"`apply`\" functions.

    ```{r}
    play_dice_4<-function(num_rolls){
      roll1<-sample(1:6,num_rolls,replace=TRUE)
      win_total<-function(roll){
        if (any(roll) %in% c(2, 4, 6)) {
          return(roll)
      } else {
         return(-cost_per_roll)
      }
    }
      win<-sum(sapply(roll1,win_total))
      return(win)
    }
    ```

### b) 

Demonstrated that all versions work.

```{r}
play_dice_1(3)
play_dice_1(3000)
```

```{r}
play_dice_2(3)
play_dice_2(3000)
```

```{r}
play_dice_3(3)
play_dice_3(3000)
```

```{r}
play_dice_4(3)
play_dice_4(3000)
```

### c)

For this part, I need to demonstrate that the four versions give the same result. To do so, I employed the "`seed="` and `set.seed()` , by adding it into the functions I created in part a), I can control the randomization process, so that all four versions get the same random sample.

```{r}
# Version 1
play_dice_loop<-function(num_rolls,seed=NULL) {
  if (!is.null(seed)) {
    set.seed(seed)
  }
  win<-0
  for (i in 1:num_rolls) {
    roll<-sample(1:6,1,replace=TRUE)
    if (roll %in% c(2,4,6)) {
      win<-win+roll
    } else {
      win<-win-cost_per_roll
    }
  }
  return(win)
}

# Version 2
play_dice_vectorized<-function(num_rolls,seed=NULL){
  if (!is.null(seed)){
    set.seed(seed)  # Set a seed if provided
  }
  roll<-sample(1:6, num_rolls,replace=TRUE)
  win<-sum(ifelse(roll %in% c(2,4,6),roll,-cost_per_roll))
  return(win)
}

# Version 3
play_dice_collapsed<-function(num_rolls,seed=NULL) {
  if (!is.null(seed)) {
    set.seed(seed) 
  }
  rolls<-sample(1:6, num_rolls, replace = TRUE)
  roll_table<-table(rolls)
  cols<-as.integer(names(roll_table))
  cols<-cols[cols %in% c(2,4,6)]
  
  win<-sum(cols*roll_table[as.character(cols)])
  total_cost<-cost_per_roll*(num_rolls-sum(roll_table[as.character(cols)]))
  total_winnings<-win-total_cost
  return(total_winnings)
}

# Version 4
play_dice_apply<-function(num_rolls,seed=NULL) {
  if (!is.null(seed)) {
    set.seed(seed)
  }
  
  roll1<-sample(1:6,num_rolls,replace=TRUE)
  win_total<-function(roll){
    if (roll %in% c(2, 4, 6)) {
      return(roll)
  } else {
     return(-cost_per_roll)
  }
}
  win<-sum(sapply(roll1,win_total))
  return(win)
}
```

```{r}
input1<-3
input2<-3000
seed1<-12
seed2<-123

result1_loop<-play_dice_loop(input1, seed1)
result1_vectorized<-play_dice_vectorized(input1, seed1)
result1_collapsed<-play_dice_collapsed(input1, seed1)
result1_apply<-play_dice_apply(input1, seed1)

result2_loop<-play_dice_loop(input2, seed2)
result2_vectorized<-play_dice_vectorized(input2, seed2)
result2_collapsed<-play_dice_collapsed(input2, seed2)
result2_apply<-play_dice_apply(input2, seed2)

```

```{r}
print("Results for input 3:")
print(result1_loop)
print(result1_vectorized)
print(result1_collapsed)
print(result1_apply)
```

```{r}
print("Results for input 3000:")
print(result2_loop)
print(result2_vectorized)
print(result2_collapsed)
print(result2_apply)
```

### d)

```{r}
library(microbenchmark)
results_low<-microbenchmark(
  V1=play_dice_1(100),
  V2=play_dice_2(100),
  V3=play_dice_3(100),
  V4=play_dice_4(100))

results_high<-microbenchmark(
  V1=play_dice_1(10000),
  V2=play_dice_2(10000),
  V3=play_dice_3(10000),
  V4=play_dice_4(10000))
print(results_low)
print(results_high)
```

Version 2 where built-in R vectorized functions are used has the smallest mean processing time for input 100 and 10000. Version 3 does not have the best performance when the input is 100 but it is only slightly slower when the input is 10000, that is, Version 3 works better with larger input. Version 1 function using loops is the slowest function among all when input is 100 and 10000.

### e)

```{r}
MC_dice<-function(num_simulation,num_plays_per_simulation){
  results<-numeric(num_simulation)
  
  for (i in 1:num_simulation){
    win<-sum(sample(c(1:6),num_plays_per_simulation,replace=TRUE))
    results[i]<-win-(num_plays_per_simulation*cost_per_roll)
  }
  mean_win<-mean(results)
  return(mean_win)
}
MC_dice(10000,100)
```

To determine if the dice game is fair, we conduct a Monte Carlo simulation by simulating a large number of games. I choose this simulation to repeat 10000 times and 100 plays for each simulation. In a fair game, the expected winnings over a large number of plays should be close to zero. However, the result of simulation demonstrated a large expected winning amount (mean) of 149.8684, it is not a fair game.

## Problem 2

### a)

```{r}
data<-read.csv('/Users/cathy/Desktop/cars.csv')
colnames(data) <- c("height", "length", "width", "driveline", "eng_type", "hybrid", "gears", "transmission","city_mpg", "fuel_type", "highway_mpg", "classification","ID","make","model_year","year","horsepower","torque")
print(head(data))
```

### b)

```{r}
newdata<-data[which(data$fuel_type=='Gasoline'),]
print(head(newdata))
```

### c)

```{r}
mod<-lm(highway_mpg~horsepower+torque+width+length+height+as.factor(year),data=newdata)
summary(mod)
```

The coefficient for horsepower is approximately 0.01635, since it is positive, it indicates a positive relationship between the horsepower and highway mpg. For every one-unit increase in horsepower, highway mpg should increase by 0.01635 units, assuming all other factors remain constant. The p-value (7.96e-13) is very small, which suggests that this relationship is highly statistically significant. Therefore, we have strong evidence to conclude that horsepower has a significant impact on highway mpg.

### d)

```{r}
library(emmeans)
mod_interaction<-lm(highway_mpg~horsepower*torque+width+length+height+as.factor(year),data=newdata)
summary(mod_interaction)
em<-emmeans(mod_interaction,~horsepower*torque,at=list(horsepower=c(150,300,450),torque=c(100,250,400)))
emmip(em, horsepower~torque,at=list(wt=1:5))
```

### e)

Creating the dummy variables manually for the variable year.

```{r}
data2<-newdata
data2$y1<-ifelse(data2$year=="2010",1,0)
data2$y2<-ifelse(data2$year=="2011",1,0)
data2$y3<-ifelse(data2$year=="2012",1,0)
```

Calculating beta hats manually for regular linear model.

```{r}
X<-as.matrix(data2[, c("horsepower","torque","width","length","height","y1","y2","y3")])
X<-cbind(1,X)
Y<-data2$highway_mpg
beta_hat<-solve(t(X) %*% X) %*% t(X) %*% Y
print(beta_hat)
coefficients(mod)
```

Applying the same method for the model with interaction.

```{r}
X_int<-cbind(1,data2$horsepower,data2$torque,data2$width,data2$length,data2$height,data2$y1,data2$y2,data2$y3,data2$horsepower*data2$torque)
beta_hat2<-solve(t(X_int) %*% X_int) %*% t(X_int) %*% Y
print(beta_hat2)
coefficients(mod_interaction)
```

Both models in this part give the same results as what part c and d gives.

## Problem 3

### a)

``` stata

. import delimited "/Users/cathy/Desktop/cars.csv"
(encoding automatically selected: ISO-8859-1)
(18 vars, 5,076 obs)
```

``` stata
describe 

Contains data
 Observations:         5,076                  
    Variables:            18                  
-------------------------------------------------------------------------------------------------------------------
Variable      Storage   Display    Value
    name         type    format    label      Variable label
-------------------------------------------------------------------------------------------------------------------
dimensionshei~t int     %8.0g                 Dimensions.Height
dimensionslen~h int     %8.0g                 Dimensions.Length
dimensionswidth int     %8.0g                 Dimensions.Width
engineinform~ne str17   %17s                  Engine Information.Driveline
engineinform~pe str60   %60s                  Engine Information.Engine Type
engineinform~id str4    %9s                   Engine Information.Hybrid
engineinform~rd byte    %8.0g                 Engine Information.Number of Forward Gears
engineinforma~n str30   %30s                  Engine Information.Transmission
fuelinfor~tympg byte    %8.0g                 Fuel Information.City mpg
fuelinformati~e str22   %22s                  Fuel Information.Fuel Type
fuelinfor~aympg int     %8.0g                 Fuel Information.Highway mpg
identificatio~n str22   %22s                  Identification.Classification
identificatio~d str67   %67s                  Identification.ID
identificatio~e str18   %18s                  Identification.Make
identific~lyear str48   %48s                  Identification.Model Year
identific~nyear int     %8.0g                 Identification.Year
engineinforma~c int     %8.0g                 Engine Information.Engine Statistics.Horsepower
v18             int     %8.0g                 Engine Information.Engine Statistics.Torque
-------------------------------------------------------------------------------------------------------------------
Sorted by: 
     Note: Dataset has changed since last saved.
```

``` stata
. rename dimensionslen~h length

. rename dimensionswidth width

. rename engineinform~ne driveline

. rename engineinform~pe eng_type

. rename engineinform~id hybrid

. rename engineinform~rd gear

. rename engineinforma~n transmission

. rename fuelinfor~tympg city_mpg

. rename fuelinformati~e fuel_type

. rename fuelinfor~aympg highway_mpg

. rename identificatio~n classification

. rename identificatio~d ID

. rename identificatio~e make

. rename identific~lyear model_year

. rename identific~nyear year

. rename engineinforma~c horsepower

. rename v18 torque

```

### b)

``` stata
. keep if fuel_type=="Gasoline"
(485 observations deleted)

. 
. 
. * restore
```

### c)

``` stata
. regress highway_mpg horsepower torque width length height i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------
```

The coefficient for horsepower is approximately 0.01635, since it is positive, it indicates a positive relationship between the horsepower and highway mpg. For every one-unit increase in horsepower, highway mpg should increase by 0.01635 units, assuming all other factors remain constant. The p-value (\<0.001) is very small, which suggests that this relationship is highly statistically significant. Therefore, we have strong evidence to conclude that horsepower has a significant impact on highway mpg.

### d)

``` stata
regress highway_mpg c.horsepower##c.torque c.width c.length c.height i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

---------------------------------------------------------------------------------------
          highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
                      |
c.horsepower#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
                      |
                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
                      |
                 year |
                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
                      |
                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
---------------------------------------------------------------------------------------
```

``` stata
. margins, at(horsepower=(150 300 450) torque=(100 250 400))

Predictive margins                                       Number of obs = 4,591
Model VCE: OLS

Expression: Linear prediction, predict()
1._at: horsepower = 150
       torque     = 100
2._at: horsepower = 150
       torque     = 250
3._at: horsepower = 150
       torque     = 400
4._at: horsepower = 300
       torque     = 100
5._at: horsepower = 300
       torque     = 250
6._at: horsepower = 300
       torque     = 400
7._at: horsepower = 450
       torque     = 100
8._at: horsepower = 450
       torque     = 250
9._at: horsepower = 450
       torque     = 400

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
         _at |
          1  |   33.91927   .1771264   191.50   0.000     33.57202    34.26653
          2  |   23.53841   .2278581   103.30   0.000      23.0917    23.98512
          3  |   13.15754   .5404044    24.35   0.000     12.09809      14.217
          4  |   33.10512    .420147    78.79   0.000     32.28143    33.92882
          5  |   25.25229   .1307485   193.14   0.000     24.99596    25.50862
          6  |   17.39945   .2267283    76.74   0.000     16.95495    17.84394
          7  |   32.29098    .751469    42.97   0.000     30.81774    33.76422
          8  |   26.96616   .4369495    61.71   0.000     26.10953     27.8228
          9  |   21.64135   .1686099   128.35   0.000     21.31079    21.97191
------------------------------------------------------------------------------
. marginsplot, xdim(torque)

Variables that uniquely identify margins: horsepower torque

```

![](images/marginplot1.jpg)
